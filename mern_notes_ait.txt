MERN Stack Workshop (AIT Bengaluru)
Duration: 6 days (36 hours)

Day1: Monday 26-05-2025

Session1:
Theory on Databases and Technologies, Web Apps etc.
1. notepad++		For making quick notes
Link:	https://notepad-plus-plus.org/downloads/v8.7.7/

2. node
Link:	https://nodejs.org/en/download

3. VS Code
Link: 	https://code.visualstudio.com/download

4. git
Link:	https://git-scm.com/downloads

5. postman
Link:	https://www.postman.com/downloads/

6. mongodb
	a. server
	Link:	https://www.mongodb.com/try/download/community
	b. compass (.exe)
	Link:	https://www.mongodb.com/try/download/shell
	c. shell (download .msi file)
	Link:	https://www.mongodb.com/try/download/shell
Session2:
App Installations and Git Repo creation, PAT creation, git commands

Once all installer files (setup files, .msi files) are downloaded, cut and paste them into their respective folders inside the software folder.

Now install all the Apps one by one (double click and install)

Open the command prompt in home directory and Check if the apps are availabvle to use/run.

$ code --version
$ git --version

If the app/command is not recognisable even after installing, then go to the path where it is installed (For example, mongod command, is available in C:\Program Files\MongoDB\Server\7.0\bin) Copy thios path and add it to the Environment variables "path" and now close and open the command prompt and you can see the "mongod" command is available for use(recognised).

Git:
1. Create(login into) git account (use your personal and permanent email id)

2. Create new Repo
	Click on + button on top (Click New Repository)
	Repo name -> Description -> Public -> Add Readme File -> Create
Repo URL:	https://github.com/neelmyna/ait_mern


3. Configure your git account with your system/laptop
	$ git config --global user.name "USERNAME"
	$ git config --global user.email "EMAIL"

4. Create Personal Access Token (PAT)
	On top right corner, click on profile icon
	Scroll down and click settings
	Next window, scroll down and click developer settings (bottom left)
	Next window, left top, Click Personal access tokens
	Click Tokens classic
	Next window, Click generate new token, Click generate new token classic
	Add a note (this PAT is created for my learning purpose during my engineering)
	Click Expiration, select NO EXPIRIRATION
	Select the 1st (top most) check box Repo
	Scroll down fully and click Generate token (green button)
	Now copy the PAT
	Come to gmail(your personal mailing app)
	Mail the PAT to yourself (Add the mail subject as "git pat")
	NOTE: Do not store the PAT anywhere else. It is confidential. And you need it for next few years. Hence mail it to yourself 
	
GIT COMMANDS:

$ git status
This is to know the status of my local repo w.r.t. to the remote repo

$ git clone git_repo_url
$ git clone https://github.com/neelmyna/ait_mern

$ git pull origin main
This command downloads the content of the remote repo that is not available in local repo (from the main branch only).

CLONE USING PAT:
$ git clone https://PAT@git_URL
-------------------------------
DAY2 27-05-2025 Tuesday

Java	MySQL
byte	tinyint
short	smallint
int		int
long	bigint
----------------------------
map, filter, reduce

The map method is used to access all elements of a list/array and do something with it.
For example, I want to add bonus of Rs.1000/- to salary of every employee whose details are available in the list.

The filter method is used to get the filtered objects from the list on some filtering cretiria.
For example, I want the list of employees who are not from Bengaluru.
OR, I want the list of employees who are working as developers.

The reduce method is used to deduce/calculate some value using the elements/objects of the list.
For example, to calsulate the sum of all salaries of the employees.
Or to find the employee with highest salary.
--------------------------------
A template row for a table is below:
newRow = `<tr> <td> ${name} </td> <td> ${price} </td> <td> ${quantity} </td> <td> ${amount} </td> </tr>`

var rows = '' // To store all the rows

rows = rows + newRow

<table>
	<tr>
		<th> Name </th>
		<th> Price </th>
		<th> Quantity </th>
		<th> Total Amount </th>
		${rows}
	</tr>
</table>


name = document.getElementById("productName").value
price = pasrseFloat(document.getElementById("price").value)
quantity = parseInt(document.getElementById("quantity").value)
totalAmount = pasrseFloat(document.getElementById("totalAmount").value)

product = {
	name : name,
	price : price,
	quantity : quantity,
	totalAmount : totalAmount,
}
-----------------------------------------------
STEPS TO CRAETE BACKEND APP:

create a new folder named "person"
from the command prompt go inside the folder
run command:
$ npm init

Now open the folder person in vs code
Create a new file index.js  (This file should a sibling of package.json)

$ npm i express
-------------------------------------------
https://docs.google.com/forms/d/1z8zG0Fezu7TFOqPtqFvMcbUys423fURPJWdSMszStZM/edit

p1.js

const firstNumber = 20
const secondNumber = 40

function bigOfTwo(num1, num2) {
    if(num1 > num2)
        return num1
    else
        return num2
}

const smallOfTwo = (num1, num2) => {
    if(num1 < num2)
        return num1
    else
        return num2
}

module.exports = {firstNumber, secondNumber, bigOfTwo, smallOfTwo}

//export {firstNumber, secondNumber, bigOfTwo, smallOfTwo}
----------------------------
index.js

// import { firstNum, secondNum, bigOfTwo, smallOfTwo } from "./p1";

const  { firstNumber, secondNumber, bigOfTwo, smallOfTwo }  = require('./p1.js')

console.log(`First Number = ${firstNumber}`)
console.log(`Second Number = ${secondNumber}`)

const num1 = 25
const num2 = 33

console.log(`Biggest between ${num1} and ${num2} is ${bigOfTwo(num1, num2)}`)
console.log(`Smallest between ${num1} and ${num2} is ${smallOfTwo(num1, num2)}`)
---------------------------------------
https://tinyurl.com/ait-mern-test1

----------------------------------------
program3
index.js:
const express = require('express');
const app = express();
const port = 3000;

app.listen(3000, () => {
    console.log('Server is running on port 3000')
  });

//  app.listen(port, () => {
//    console.log(`Server is running on http://localhost:${port}`);
//  });
------------------------------------------
example 2
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
------------------------------------------
example 3

const express = require('express');
const app = express();
const port = 3000;


app.listen(port, () => {
	console.log(`Server is running on http://localhost:${port}`);
});

app.get('/', (req, res) => {
  res.send('The Response just came from the Backend Express!');
});
--------------------------------------------------
example 4

const express = require('express');
const mongoose = require('mongoose');
const app = express();
const port = 3000;

const mongoURI = 'mongodb://127.0.0.1:27017/nithin_db';

// Connect to MongoDB
mongoose.connect(mongoURI)
.then(() => {
  console.log('Connected to MongoDB');
})
.catch((err) => {
  console.error('Error connecting to MongoDB', err);
});

// Disconnect from MongoDB
const disconnectFromMongoDB = async () => {
  try {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  } catch (err) {
    console.error('Error disconnecting from MongoDB', err);
  }
};

disconnectFromMongoDB();

app.listen(port, () => {
    console.log('Server is running on port 3000')
  });

//  console.log(`Server is running on http://localhost:${port}`);
-----------------------------------------------
Flight Model

airline			airindia
source			bengaluru
destination		kolkate
duration		2.5
fare			5800
capacity		180

Steps:
Create a folder "flight"
From inside the folder open the command prompt
$ npm list 		Check if the modules are available
$ npm init -y	Create an empty backend project
Note: Make sure in the package.json you have the dependencies json with the modules.
If not avialable then run the command:
$ npm install express mongoose cors

Create the files like this:
	flightController.js
	server.js   	OR      index.js
	models (folder)
		flightModel.js
-----------------------------------------------------------
https://docs.google.com/forms/d/1ek6fMQflnl32m4ceA-8JkRJqAfQqiVOyH-mBVtuEzgU/edit

Command to update npm:
$ npm install -g npm

Command to create react app using vite:
$ npm create vite@latest flightapp -- --template
-------------------------------------------
REACT EXAMPLES

program1:

function App() {
  return (
    <div className="App">
      <h2>
        React Program One
      </h2>
      <p>
        Starts with index.html
        index.js and app.js are the framework tools that gives us bundle.js and in the browser index.html linked with bundle.js is rendered.
      </p>
    </div>
  );
}
export default App;
---------------------------------------
Firstly, the index.js is what it runs.
And index.html is what is rendered to the browser. This html/page that is rendered has an element "root" defined in it.
In the index.js we have the ReactDOM in which the "root" element is linked/used.
Further, via this root element, we render all the React components.
App is a component which was already created by default. HelloWorld is another component which we created and defined. And these 2 components are used one after the other with in the root which is rendered to the webpage.
---------------------------------------
Program2: HelloWorld.js

function HelloWorld () {
  return (
    <p style={{color:"blue", fontSize:"40px" } }>
      Child App Content
    </p>
  )
}
export default HelloWorld;
--------------------------------
function App () {
  return (
    <p>
      Parent App Content
    </p>
	<HelloWorld/>
  )
}
export default HelloWorld;
-----------------------------------------
-> As we know that the index.js is the entry point of the React-App, In this, we are adding the App component.
-> Now, every Component is implemented using code and the Code for every component is as usually is put into a file and in React it is JS file.
-> The code is implemented either in a Function called as Functional component, alternatively it is implemneted using a class called as class component.
-> If we wish to add styling, then external css file can be linked using import stmt. For example:
import './App.css';
Here, note that the path is mentioned in single quotes. The DOT represents PWD.
-> Note that for the component to be used by other components, we must export it.
-> One JS file can have multiple components(functions or classes). However, only one component can be exported as default. In other words, if we use default in export statement, only one component can be exported.
-> To export multiple components, we must bind them in braces. In this case the export cannot be default.
-> We can directly mention the export and export default right at definition of the function/class.
NOTE:
Install the extension: ES7 + React/Redux/React-Native snippets
Author: dsznajder
----------------------------
.para {
   background-color: blue;
   border-radius: 2px;
   border: 2px dashed pink;
  /* HOVER OFF */
   -webkit-transition: padding 2s;
}

.para {
   background-color: black;
   border-radius: 8px;
   border: 2px solid red;
  /* HOVER ON */
   -webkit-transition: border-radius 2s;
}
---------------------------------------
constructor(props)
props here is properties. It is a JSON object. It has values to the component.
------------------------------------
import { Component } from 'react';

export default class AnimalLover extends Component {  
    render() {
    return (
      <h2> 
            I am Animal Lover
      </h2>
    )
  }
}
----------------------------------
export default class IncrementCounter extends Component {
    constructor (props) {
        super(props)
        this.state = {count:10}
        this.doCount = this.doCount.bind(this)
    }
    incrementCount () {
        this.setState({countNum: this.state.count + 1})    
    }
    render () {
        return (
        <div>
            <h2> I am Animal Lover </h2>
            <input type="button" value={this.state.countNum} onClick={this.incrementCount} />
        </div>
          )
    }
}
------------------------------
import { Component } from "react";

export class Trainer extends Component {
    constructor(props) {
        super(props);       
        this.state = {trainerList: [{id: 101, name:'Nithin', technology:'MERN', location:'Mysuru'}, {id: 102, name:'Maheswaran', technology:'MEAN', location:'Tiruchirapalli'}, {id: 103, name:'Navya', technology:'Java', location:'Madanapalli'} ] }
    }
    render () {
        let displayTrainers = (trainer) => {
            return <tr>
                <td> {trainer.id} </td>
                <td> {trainer.name} </td>
                <td> {trainer.technology} </td>
                <td> {trainer.location} </td>    
            </tr>;
        };

        let trainerRows = this.state.trainerList.map(displayTrainers);
        return (
            <>
                <div className="myTopDiv">
                    <h2> Trainers List </h2>
                    <input type="button" id="add" value="Add Trainer"/>
                </div>
                <div>
                    <table>
                        <tr>
                            <th> ID </th>
                            <th> Name </th>
                            <th> Technology </th>
                            <th> Location </th>
                        </tr>
                        {trainerRows}
                    </table>
                </div>
            </>
        )
    }
}
----------------------------------------------------------
Shapes.js

import { Component } from "react";

export class Square extends Component{
    constructor(props){
        super(props);
    }
    render(){
        return(
            <div class="square"></div>
        )
    }
}

export class CornerCurvedSquare extends Component{
    constructor(props){
        super(props);
    }
    render(){
        return(
            <div class="corner-curved-square"></div>
        )
    }
}

export class Circle extends Component{
    constructor(props){
        super(props);
    }
    render(){
        return(
            <div class="circle"></div>
        )
    }
}
----------------
App.js Code:
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import './App.css';
import { Circle, CornerCurvedSquare, Square } from './Shapes';

function App() {
  return (
    <div className="App">
      <BrowserRouter>
        <div>
          <a href="/square">Square</a> 
           <a href="/circle">Circle</a>
           <a href="/curve-square">Curved-Square</a>
        </div>
          <Routes>
            <Route path="/" element={<Square/>} />
            <Route path="/square" element={<Square/>} />
            <Route path="/circle" element={<Circle/>} />
            <Route path="/curve-square" element={<CornerCurvedSquare/>} />
          </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;
---------------------------------
shapes.css
.square {
	width: 400px;
	height: 400 px;
	border: 2px solid brown;
	background-color: cyan;
}
.cornerCurvedsquare {
	width: 400px;
	height: 400 px;
	border: 2px solid brown;
	background-color: cyan;
	border-radius: 3px;
}
.circle {
	width: 400px;
	height: 400 px;
	border: 2px solid brown;
	background-color: cyan;
	border-radius: 50px;
}
----------------------------------------------------------
GenericStudent.js

import { Component } from "react";

export default class GenericStudent extends Component{
    constructor(props){
        super(props);
        this.state = {id: props.id, 
            name: props.name, 
            mark1: props.mark1, 
              : props.mark2};
    }
    onNameChange = (e) => {        
        this.setState({name: e.target.value})
    }
    onIdChange = (e) => {        
        this.setState({id: parseInt(e.target.value)})
    }
    onMark1Change = (e) => {        
        this.setState({mark1: parseInt(e.target.value)})
    }
    onMark2Change = (e) => {        
        this.setState({mark2: parseInt(e.target.value)})
    }
    render(){
        return(
            <>
            <table width="100%"><tr><td>
            <div>
                <div style={{border:'2px solid green', 
                        backgroundColor:'brown',
                        color:'white'}}><h3>Edit Student</h3></div>
                <div>
                    <label forName="name">Name:</label>
                    <input type="text" value={this.state.name}
                        id="name"
                        onChange={this.onNameChange}/>
                </div>
                <div>
                    <label forName="id">ID:</label>
                    <input type="text" value={this.state.id}
                        id="id"
                        onChange={this.onIdChange}/>
                </div>
                <div>
                    <label forName="mark1">Mark 1:</label>
                    <input type="text" value={this.state.mark1}
                        id="mark1"
                        onChange={this.onMark1Change}/>
                </div>
                <div>
                    <label forName="mark2">Mark 2:</label>
                    <input type="text" value={this.state.mark2}
                        id="mark2"
                        onChange={this.onMark2Change}/>
                </div>
            </div>
            </td>
			
			<td>
            <div>
                <div style={{border:'2px solid green', 
                        backgroundColor:'brown',
                        color:'white'}}><h3>View Student</h3></div>
                <div>
                    <label>Name:</label>
                    {this.state.name}
                </div>
                <div>
                    <label>ID:</label>
                    {this.state.id}
                </div>
                <div>
                    <label>Mark 1:</label>
                    {this.state.mark1}
                </div>
                <div>
                    <label>Mark 2:</label>
                    {this.state.mark2}
                </div>
                <div>
                    <label>Total:</label>
                    {this.state.mark1 + this.state.mark2}
                </div>
            </div>  
            </td></tr></table>
            </>
        )
    }
}

export  class ContainerStudent extends Component{
    constructor(props){
        super(props);
        this.state = {id: props.id, 
            name: props.name, 
            mark1: props.mark1, 
            mark2: props.mark2};
    }
    onStudentChange = (dataCode, data) => {
        switch(dataCode){
            case 1: this.setState({id: data}); break;
            case 2: this.setState({name: data}); break;
            case 3: this.setState({mark1: data}); break;
            case 4: this.setState({mark2: data}); break;
        } 
    }
    
    render(){
        return(
            <>
            <table width="100%"><tr>
            <td>
                <EditStudent id={this.state.id}
                    name={this.state.name}
                    mark1={this.state.mark1}
                    mark2={this.state.mark2}
                    onStudentChange={this.onStudentChange} />
            </td>
            <td>                
                <ViewStudent id={this.state.id}
                    name={this.state.name}
                    mark1={this.state.mark1}
                    mark2={this.state.mark2} />              
            </td></tr></table>
            </>
        )
    }
}

export  class EditStudent extends Component{
    constructor(props){
        super(props);       
    }
    onNameChange = (e) => {        
        this.props.onStudentChange(2,e.target.value)
    }
    onIdChange = (e) => {        
        this.props.onStudentChange(1,parseInt(e.target.value))
    }
    onMark1Change = (e) => {        
        this.props.onStudentChange(3,parseInt(e.target.value))
    }
    onMark2Change = (e) => {        
        this.props.onStudentChange(4,parseInt(e.target.value))
    }
    render(){
        return(
            <>          
            <div>
                <div style={{border:'2px solid green', 
                        backgroundColor:'brown',
                        color:'white'}}><h3>Edit Student</h3></div>
                <div>
                    <label forName="name">Name:</label>
                    <input type="text" value={this.props.name}
                        id="name"
                        onChange={this.onNameChange}/>
                </div>
                <div>
                    <label forName="id">ID:</label>
                    <input type="text" value={this.props.id}
                        id="id"
                        onChange={this.onIdChange}/>
                </div>
                <div>
                    <label forName="mark1">Mark 1:</label>
                    <input type="text" value={this.props.mark1}
                        id="mark1"
                        onChange={this.onMark1Change}/>
                </div>
                <div>
                    <label forName="mark2">Mark 2:</label>
                    <input type="text" value={this.props.mark2}
                        id="mark2"
                        onChange={this.onMark2Change}/>
                </div>
            </div>
            </>
        )
    }
}

export  class ViewStudent extends Component{
    constructor(props){
        super(props);     
    }
    
    render(){
        return(
            <>   
            <div>
                <div style={{border:'2px solid green', 
                        backgroundColor:'brown',
                        color:'white'}}><h3>View Student</h3></div>
                <div>
                    <label>Name:</label>
                    {this.props.name}
                </div>
                <div>
                    <label>ID:</label>
                    {this.props.id}
                </div>
                <div>
                    <label>Mark 1:</label>
                    {this.props.mark1}
                </div>
                <div>
                    <label>Mark 2:</label>
                    {this.props.mark2}
                </div>
                <div>
                    <label>Total:</label>
                    {this.props.mark1 + this.props.mark2}
                </div>
            </div>  
            
            </>
        )
    }
}
-----------------------------------------------
\Create the Components (js files each for a component)
Header.js
CustomerCreate.js
CustomerEdit.js
CustomerList.js

To enable bootstrap:
go to getbootstrap.com -> docs -> from one of the example, copy the css link and js script TAGS and add them in the index.html

Now, entire App is bootstrap enabled.

Now, in the header.js
Create functional component and copy the navbar code from getbootstrap

Why do we use the useEffect Hook?
OR
Why do we use the life cycle methods of React?
1. Call to the Backend
2. To register and unregister 3rd party library

What is useEffect Hook?
It is used by the functional components to implement life cycle methods like approach which are available in class components. Thus it is the alternative to the life cycle methods of the class components.

Life cycle methods of React:
1. componentDidMount: To make call to the backend, to register 3rd party library.
2. componentWillUnMount: To unregister the 3rd party library.
3. shouldComponentUpdate: 

useEffect function takes 2 Args.
1. Argument function
2. dependency Array

Alternative for Life cycle methods is to use useEffect:
1. componentDidMount
	will happen when there are no dependencies in the dependency array
2. componentWillUnMount
	will happen if there a return stmt in the Arg function.
3. shouldComponentUpdate
	will happen when there are dependencies in the dependency array
---------------------------------------------
Create the below file in api folder
config.js

const express = require("express"); 
const cors = require("cors"); 
const mongoose = require("mongoose"); 
const app = express(); 

const app_properties = {
    server_port : 8080,
    cors_origin : "http://localhost:3000",
    mongo_url: "mongodb://localhost:27017/nithin_db", 
    IS_DEBUG : true,
    imports : {express, cors, mongoose},
    instances: { app }
}

module.exports = app_properties;